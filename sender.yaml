esphome:
  name: lora_sender
  platform: ESP32
  board: esp32dev

  # 🔐 Register AES component on boot
  on_boot:
    priority: -100
    then:
      - lambda: |-
          auto aes = new esphome::hardware_aes::HardwareAESCBCComponent();
          aes->set_key_from_string(id(aes_key_str), 16);       // AES-128
          aes->set_hmac_key_from_string(id(hmac_key_str), 32); // HMAC-256
          App.register_component(aes);
          id(aes_component) = aes;

# 🧠 AES & HMAC Keys
globals:
  - id: aes_key_str
    type: std::string
    initial_value: "mysecretkey123"
  - id: hmac_key_str
    type: std::string
    initial_value: "anothersecretkey456"
  - id: aes_component
    type: esphome::hardware_aes::HardwareAESCBCComponent*
    restore_value: no
    initial_value: "nullptr"

external_components:
  - source:
      type: git
      url: https://github.com/cybermatte/esphome-hardware-aes-cbc
      ref: main
      path: esphome/components
    components: [hardware_aes]

logger:

i2c:
  sda: GPIO21
  scl: GPIO22
  scan: true

sensor:
  - platform: sht4x
    temperature:
      name: "SHT40 Temperature"
      id: temp_sht
    humidity:
      name: "SHT40 Humidity"
      id: humidity_sht
    address: 0x44
    update_interval: 60s

# 📡 LoRa Radio (SX127x)
spi:
  clk_pin: GPIO18
  mosi_pin: GPIO23
  miso_pin: GPIO19

sx126x:
  cs_pin: GPIO5
  busy_pin: GPIO14
  rst_pin: GPIO12
  dio1_pin: GPIO26
  frequency: 915000000
  modulation: LORA
  hw_version: sx1262
  rf_switch: true
  pa_power: 10
  bandwidth: 125_0kHz
  spreading_factor: 7
  coding_rate: CR_4_6
  preamble_size: 8
  crc_enable: true
  sync_value: [0x14, 0x24]
  tcxo_voltage: 1_8V
  tcxo_delay: 5ms

# 📦 Custom Component to Encrypt and Send Payload
custom_component:
  - lambda: |-
      static uint8_t counter = 0;

      std::vector<uint8_t> payload = {
        0x01,  // Device ID
        counter++,
        (uint8_t)(id(temp_sht).state * 10),
        (uint8_t)(id(humidity_sht).state)
      };

      std::vector<uint8_t> encrypted;
      uint8_t iv[16];
      id(aes_component)->encrypt_cbc_with_hmac(payload, encrypted, iv);

      std::vector<uint8_t> packet(iv, iv + 16);
      packet.insert(packet.end(), encrypted.begin(), encrypted.end());

      id(lora).send_packet(packet);
      ESP_LOGI("sender", "Encrypted SHT40 sensor packet sent");
      return {};
    update_interval: 60s

